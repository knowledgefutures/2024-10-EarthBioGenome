---
import Layout from '~/layouts/Layout.astro';
import authors from '~/data/authors.json';
import contributors from '~/data/contributors.json';
import AuthorHeader from '~/components/AuthorHeader.astro';
import { getGenome, getGenomeNote, getAuthor } from '~/lib/populateData';
import type { CoauthorContributor } from '~/types/pubs';
import CoauthorGraph from '~/components/CoauthorGraph';
import { SquareDashed } from 'lucide-react';

export function getStaticPaths() {
	return authors.map((author) => {
		return { params: { slug: author.slug } };
	});
}
const { slug } = Astro.params;
const activeAuthor = authors.find((author) => {
	return author.slug === slug;
});
if (!activeAuthor) {
	return null;
}

const genomeNoteIdsWithAuthor = contributors
	.filter((contributor) => {
		return contributor.authorId === activeAuthor.id;
	})
	.map((contributor) => {
		return contributor.genomeNoteId;
	});

const coauthorContributors = contributors
	.filter((contributor) => {
		return genomeNoteIdsWithAuthor.includes(contributor.genomeNoteId);
	})
	.filter((contributor) => {
		return contributor.authorId !== activeAuthor.id;
	})
	.map((contributor) => {
		const genomeNote = getGenomeNote(contributor.genomeNoteId);
		const genome = getGenome(genomeNote.genomeId);
		return { ...contributor, genome };
	})
	.reduce((acc: CoauthorContributor[], contributor) => {
		const existingIndex = acc.findIndex((item) => item.authorId === contributor.authorId);
		if (existingIndex !== -1) {
			const existing = acc[existingIndex];
			const updated = {
				...existing,
				genomes: [...existing.genomes, contributor.genome],
			};
			return [...acc.slice(0, existingIndex), updated, ...acc.slice(existingIndex + 1)];
		}
		const newContributor = {
			...contributor,
			genomes: [contributor.genome],
			author: getAuthor(contributor.authorId),
		};
		return [...acc, newContributor];
	}, [])
	.sort((foo, bar) => {
		if (foo.genomes.length < bar.genomes.length) {
			return 1;
		}
		if (foo.genomes.length > bar.genomes.length) {
			return -1;
		}
		return 0;
	});
---

<Layout title={`${activeAuthor.name} Â· UGNR`}>
	<main class="">
		<AuthorHeader author={activeAuthor} />
		<section class="w-content-narrow min-h-96 mb-32">
			<CoauthorGraph coauthorContributors={coauthorContributors} client:load />
			<!-- {
				coauthorContributors.map((coauthorContributor) => {
					return (
						<div>
							<div>
								<a href={`/author/${coauthorContributor.author.slug}`}>
									{coauthorContributor.author.name}
								</a>
							</div>
							<div class="pl-4">
								{coauthorContributor.genomes.map((genome) => {
									return (
										<div>
											<a href={`/genome/${genome.slug}`}>
												{genome.commonName}
											</a>
										</div>
									);
								})}
							</div>
						</div>
					);
				})
			} -->
			{
				!coauthorContributors.length && (
					<div class="flex flex-col items-center opacity-50 space-y-4 my-20">
						<SquareDashed size={96} className="" />
						<div class="text-xl font-bold uppercase">No Coauthors</div>
					</div>
				)
			}
		</section>
	</main>
</Layout>
